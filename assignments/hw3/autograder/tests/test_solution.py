import unittestimport inspectimport typesfrom gradescope_utils.autograder_utils.decorators import weight, visibility, tagsimport homework3 as Xclass TestSolution(unittest.TestCase):############################################################# Section 1: Working with Lists############################################################# Section 1, Problem 1    def function_lines(self, f):        lines = inspect.getsourcelines(f)[0]        return len(lines)    @weight(1)    def test_extract_and_apply_1(self):        l = [1, 2, 3, 4]        p = lambda x: False        f = lambda x: x        self.assertEqual(X.extract_and_apply(l, p, f), [])    @weight(1)    def test_extract_and_apply_2(self):        l = [1, 2, 3, 4]        p = lambda x: True        f = lambda x: x        self.assertEqual(X.extract_and_apply(l, p, f), [1, 2, 3, 4])    @weight(1)    def test_extract_and_apply_3(self):        l = [1, 2, 3, 4]        p = lambda x: x % 2 == 0        f = lambda x: 3 * x        self.assertEqual(X.extract_and_apply(l, p, f), [6, 12])    @weight(1)    def test_extract_and_apply_4(self):        l = ["a", "b", "c", "d", "e"]        p = lambda x: x not in "aeiou"        f = lambda x: 2 * x.upper()        self.assertEqual(X.extract_and_apply(l, p, f), ["BB", "CC", "DD"])    @weight(1)    def test_extract_and_apply_num_lines(self):        self.assertEqual(self.function_lines(X.extract_and_apply), 2,             "Function is not implemented in one line.")# Section 1, Problem 2    @weight(1)    def test_concatenate_1(self):        self.assertEqual(X.concatenate([[1, 2], [3, 4]]), [1, 2, 3, 4])    @weight(0.5)    def test_concatenate_2(self):        self.assertEqual(X.concatenate(["abc", (0, [0])]),             ["a", "b", "c", 0, [0]])    @weight(0.5)    def test_concatenate_3(self):        self.assertEqual(X.concatenate([]), [])    @weight(0.5)    def test_concatenate_4(self):        self.assertEqual(X.concatenate(()), [])    @weight(0.5)    def test_concatenate_5(self):        self.assertEqual(X.concatenate("abc"), ["a", "b", "c"])    @weight(1)    def test_concatenate_6(self):        self.assertEqual(X.concatenate([[1], [2, [3]], [4, (5, 6)]]),             [1, 2, [3], 4, (5, 6)])    @weight(1)    def test_concatenate_num_lines(self):        self.assertEqual(self.function_lines(X.extract_and_apply), 2,             "Function is not implemented in one line.")# Section 1, Problem 3    @weight(2)    def test_transpose_1(self):        self.assertEqual(X.transpose([[1, 2], [3, 4], [5, 6]]),             [[1, 3, 5], [2, 4, 6]])    @weight(2)    def test_transpose_2(self):        self.assertEqual(X.transpose([[1, 0, 0], [0, 1, 0], [0, 0, 1]]),             [[1, 0, 0], [0, 1, 0], [0, 0, 1]])    @weight(1)    def test_transpose_not_builtin(self):        self.assertEqual(X.transpose([['a', 2, 3]]), [['a'], [2], [3]])############################################################# Section 2: Sequence Slicing############################################################# Section 2, Problem 1    @weight(0.5)    def test_copy_1(self):        self.assertEqual(X.copy("abc"), "abc")        self.assertEqual(X.copy((1, 2, 3)), (1, 2, 3))    @weight(0.5)    def test_copy_2(self):        x = [0, 0, 0]        y = X.copy(x)        self.assertEqual(x, [0, 0, 0])        self.assertEqual(y, [0, 0, 0])        x[0] = 1        self.assertEqual(x, [1, 0, 0])        self.assertEqual(y, [0, 0, 0])    @weight(1)    def test_copy_3(self):        x = []        y = X.copy(x)        self.assertEqual(x, [])        self.assertEqual(y, [])        x.append(1)        self.assertEqual(x, [1])        self.assertEqual(y, [])    @weight(1)    def test_copy_4(self):        x = [0, 1, 2]        y = [10, 11, x]        z = X.copy(y)        self.assertEqual(y, [10, 11, [0, 1, 2]])        self.assertEqual(z, [10, 11, [0, 1, 2]])        x[0] = 3        y[0] = 13        self.assertEqual(y, [13, 11, [3, 1, 2]])        self.assertEqual(z, [10, 11, [3, 1, 2]])# Section 2, Problem 2        @weight(2)    def test_all_but_last_1(self):        self.assertEqual(X.all_but_last("abc"), "ab")        self.assertEqual(X.all_but_last((1, 2, 3)), (1, 2))    @weight(1)    def test_all_but_last_2(self):        self.assertEqual(X.all_but_last(""), "")        self.assertEqual(X.all_but_last([]), [])# Section 2, Problem 3    @weight(1)    def test_every_other_1(self):        self.assertEqual(X.every_other([1, 2, 3, 4, 5]), [1, 3, 5])        self.assertEqual(X.every_other("abcde"), "ace")    @weight(2)    def test_every_other_2(self):        self.assertEqual(X.every_other([1, 2, 3, 4, 5, 6]), [1, 3, 5])        self.assertEqual(X.every_other("abcdef"), "ace")############################################################# Section 3: Combinatorial Algorithms############################################################# Section 3, Problem 1    def comb_confirm(self, func, seq, expected):        try:            next(func(seq))        except StopIteration:            pass        self.assertEqual(sorted(func(seq)), sorted(expected))        @weight(0.5)    def test_prefixes_1(self):        self.comb_confirm(X.prefixes, [1, 2, 3], [[], [1], [1, 2], [1, 2, 3]])    @weight(0.5)    def test_prefixes_2(self):        self.comb_confirm(X.prefixes, "abc", ["", "a", "ab", "abc"])    @weight(1)    def test_prefixes_3(self):        self.comb_confirm(X.prefixes, "", [""])        self.comb_confirm(X.prefixes, [1], [[], [1]])    @weight(1)    def test_prefixes_generator(self):        self.assertIsInstance(X.prefixes([]), types.GeneratorType)    @weight(0.5)    def test_suffixes_1(self):        self.comb_confirm(X.suffixes, [1, 2, 3], [[1, 2, 3], [2, 3], [3], []])    @weight(0.5)    def test_suffixes_2(self):        self.comb_confirm(X.suffixes, "abc", ["abc", "bc", "c", ""])    @weight(1)        def test_suffixes_3(self):        self.comb_confirm(X.suffixes, "", [""])        self.comb_confirm(X.suffixes, [1], [[1], []])    @weight(1)    def test_suffixes_generator(self):        self.assertIsInstance(X.suffixes([]), types.GeneratorType)# Section 3, Problem 2    @weight(1)    def test_slices_1(self):        self.comb_confirm(X.slices, [1, 2, 3], [[1], [1, 2], [1, 2, 3], [2], [2, 3], [3]])    @weight(1)    def test_slice_2(self):        self.comb_confirm(X.slices, "abc", ["a", "ab", "abc", "b", "bc", "c"])    @weight(1)    def test_slice_3(self):        self.comb_confirm(X.slices, "", [])    @weight(1)    def test_slice_4(self):        self.comb_confirm(X.slices, [1], [[1]])    @weight(2)    def test_slices_generator(self):        self.assertIsInstance(X.slices([]), types.GeneratorType)############################################################# Section 4: Text Processing############################################################# Section 4, Problem 1    @weight(1)    def test_normalize_1(self):        self.assertEqual(X.normalize("This is an example."), "this is an example.")    @weight(2)    def test_normalize_2(self):        self.assertEqual(X.normalize("   EXTRA   SPACE   "), "extra space")    @weight(2)    def test_normalize_3(self):        self.assertEqual(X.normalize(" _TeSt_ 1 + 1 = 2 "), "_test_ 1 + 1 = 2")# Section 4, Problem 2    @weight(1)    def test_no_vowels_1(self):        self.assertEqual(X.no_vowels("This Is An Example."), "Ths s n xmpl.")    @weight(1)    def test_no_vowels_2(self):        self.assertEqual(X.no_vowels("We love Python!"), "W lv Pythn!")    @weight(1)    def test_no_vowels_3(self):        self.assertEqual(X.no_vowels("aeiouAEIOU"), "")    @weight(1)    def test_no_vowels_4(self):        self.assertEqual(X.no_vowels(" Abc Def Ghi "), " bc Df Gh ")    @weight(1)    def test_no_vowels_5(self):        self.assertEqual(X.no_vowels("rhythm 123 !@#"), "rhythm 123 !@#")# Section 4, Problem 3    @weight(1)    def test_digits_to_words_1(self):        self.assertEqual(X.digits_to_words("Zip Code: 19104"), "one nine one zero four")    @weight(1)    def test_digits_to_words_2(self):        self.assertEqual(X.digits_to_words("Pi is 3.1415..."), "three one four one five")    @weight(2)    def test_digits_to_words_3(self):        self.assertEqual(X.digits_to_words("No digits."), "")    @weight(1)    def test_digits_to_words_4(self):        self.assertEqual(X.digits_to_words("1234567890"), "one two three four five six seven eight nine zero")# Section 4, Problem 4    @weight(1)    def test_to_mixed_case_1(self):        self.assertEqual(X.to_mixed_case("to_mixed_case"), "toMixedCase")    @weight(1)    def test_to_mixed_case_2(self):        self.assertEqual(X.to_mixed_case("__EXAMPLE__NAME__"), "exampleName")    @weight(1)    def test_to_mixed_case_3(self):        self.assertEqual(X.to_mixed_case("___"), "")    @weight(1)    def test_to_mixed_case_4(self):        self.assertEqual(X.to_mixed_case("hy-phen_name"), "hy-phenName")    @weight(1)    def test_to_mixed_case_5(self):        self.assertEqual(X.to_mixed_case("i_don't_know"), "iDon'tKnow")############################################################# Section 5: Polynomials############################################################# Section 5, Problem 1    @weight(1)    def test_polynomial_get_polynomial_1(self):        self.assertEqual(X.Polynomial([(2, 1), (1, 0)]).get_polynomial(),             ((2, 1), (1, 0)))    @weight(1)    def test_polynomial_get_polynomial_2(self):        self.assertEqual(X.Polynomial(((2, 1), (1, 0))).get_polynomial(),             ((2, 1), (1, 0)))    @weight(2)    def test_polynomial_get_polynomial_3(self):        self.assertEqual(X.Polynomial([(3, 2), (2, 1), (1, 0)]).get_polynomial(),             ((3, 2), (2, 1), (1, 0)))# Section 5, Problem 2    @weight(1)    def test_polynomial_neg_1(self):        p = X.Polynomial([(2, 1), (1, 0)])        q = -p        self.assertEqual(q.get_polynomial(), ((-2, 1), (-1, 0)))    @weight(1)    def test_polynomial_neg_2(self):        p = X.Polynomial([(2, 1), (1, 0)])        q = -(-p)        self.assertEqual(q.get_polynomial(), ((2, 1), (1, 0)))    @weight(1)    def test_polynomial_neg_3(self):        p = X.Polynomial([(-3, 2), (2, 1), (1, 0)])        q = -p        self.assertEqual(q.get_polynomial(), ((3, 2), (-2, 1), (-1, 0)))    @weight(1)    def test_polynomial_neg_4(self):        p = X.Polynomial([(-3, 2), (2, 1), (1, 0)])        q = -(-p)        self.assertEqual(q.get_polynomial(), ((-3, 2), (2, 1), (1, 0)))# Section 5, Problem 3    @weight(1)    def test_polynomial_add_1(self):        p = X.Polynomial([(2, 1), (1, 0)])        q = p + p        self.assertEqual(q.get_polynomial(), ((2, 1), (1, 0), (2, 1), (1, 0)))    @weight(1)    def test_polynomial_add_2(self):        p = X.Polynomial([(2, 1), (1, 0)])        q = X.Polynomial([(4, 3), (3, 2)])        r = p + q        self.assertEqual(r.get_polynomial(), ((2, 1), (1, 0), (4, 3), (3, 2)))    @weight(1)    def test_polynomial_add_3(self):        p = X.Polynomial([(2, 1), (1, 0)])        q = X.Polynomial([(-2, 3), (-3, 2)])        r = p + q        self.assertEqual(r.get_polynomial(), ((2, 1), (1, 0), (-2, 3), (-3, 2)))# Section 5, Problem 4    @weight(1)    def test_polynomial_sub_1(self):        p = X.Polynomial([(2, 1), (1, 0)])        q = p - p        self.assertEqual(q.get_polynomial(), ((2, 1), (1, 0), (-2, 1), (-1, 0)))    @weight(1)    def test_polynomial_sub_2(self):        p = X.Polynomial([(2, 1), (1, 0)])        q = X.Polynomial([(4, 3), (3, 2)])        r = p - q        self.assertEqual(r.get_polynomial(), ((2, 1), (1, 0), (-4, 3), (-3, 2)))    @weight(1)    def test_polynomial_sub_3(self):        p = X.Polynomial([(-2, 1), (-1, 0)])        q = X.Polynomial([(4, 3), (3, 2)])        r = p - q        self.assertEqual(r.get_polynomial(), ((-2, 1), (-1, 0), (-4, 3), (-3, 2)))# Section 5, Problem 5    @weight(1)    def test_polynomial_mul_1(self):        p = X.Polynomial([(2, 1), (1, 0)])        q = p * p        self.assertEqual(type(q.get_polynomial()), tuple)        self.assertEqual(sorted(q.get_polynomial()), sorted(((4, 2), (2, 1), (2, 1), (1, 0))))    @weight(1)    def test_polynomial_mul_2(self):        p = X.Polynomial([(2, 1), (1, 0)])        q = X.Polynomial([(4, 3), (3, 2)])        r = p * q        self.assertEqual(type(r.get_polynomial()), tuple)        self.assertEqual(sorted(r.get_polynomial()), sorted(((8, 4), (6, 3), (4, 3), (3, 2))))    @weight(3)    def test_polynomial_mul_3(self):        p = X.Polynomial([(1, 1), (-1, 0)])        q = p * p * p        self.assertEqual(type(q.get_polynomial()), tuple)        self.assertEqual(sorted(q.get_polynomial()), sorted(((1, 3), (-1, 2), (-1, 2), (1, 1), (-1, 2), (1, 1), (1, 1), (-1, 0))))# Section 5, Problem 6    @weight(1)    def test_polynomial_call_1(self):        p = X.Polynomial([(2, 1), (1, 0)])        self.assertEqual([p(x) for x in range(5)], [1, 3, 5, 7, 9])    @weight(2)    def test_polynomial_call_2(self):        q = X.Polynomial([(-4, 2), (-2, 1)])        self.assertEqual([q(x) for x in range(5)], [0, -6, -20, -42, -72])    @weight(2)    def test_polynomial_call_3(self):        q = X.Polynomial([(2, 3), (-4, 2), (-2, 1)])        self.assertEqual([q(x) for x in range(5)], [0, -4, -4, 12, 56])# Section 5, Problem 7    @weight(2)    def test_polynomial_simplify_1(self):        q = X.Polynomial([(-2, 1), (-1, 0), (4, 2), (2, 1), (2, 1), (1, 0)])        q.simplify()        self.assertEqual(q.get_polynomial(), ((4, 2), (2, 1)))    @weight(2)    def test_polynomial_simplify_2(self):        q = X.Polynomial([(2, 1), (1, 0), (-2, 1), (-1, 0)])        q.simplify()        self.assertEqual(q.get_polynomial(), ((0, 0),))    @weight(3)    def test_polynomial_simplify_3(self):        q = X.Polynomial([(-1, 0), (1, 1), (1, 1), (-1, 2), (1, 1), (-1, 2), (-1, 2), (1, 3)])        q.simplify()        self.assertEqual(q.get_polynomial(), ((1, 3), (-3, 2), (3, 1), (-1, 0)))        @weight(3)    def test_polynomial_simplify_4(self):        p = X.Polynomial([(4, 4), (-2, 2), (2, 2), (-1, 0)])        p.simplify()        self.assertEqual(p.get_polynomial(), ((4, 4), (-1, 0)))# Section 5, Problem 8        @weight(1)    def test_polynomial_str_1(self):        self.assertEqual(str(X.Polynomial([(1, 1), (1, 0)])), "x + 1")        self.assertEqual(str(X.Polynomial([(2, 1), (2, 0)])), "2x + 2")    @weight(1)    def test_polynomial_str_2(self):        self.assertEqual(str(X.Polynomial([(-1, 1), (-1, 0)])), "-x - 1")        self.assertEqual(str(X.Polynomial([(-2, 1), (-2, 0)])), "-2x - 2")    @weight(1)    def test_polynomial_str_3(self):        self.assertEqual(str(X.Polynomial([(1, 2), (2, 1), (1, 0)])), "x^2 + 2x + 1")    @weight(2)    def test_polynomial_str_4(self):        self.assertEqual(str(X.Polynomial([(0, 1), (2, 3)])), "0x + 2x^3")        self.assertEqual(str(X.Polynomial([(0, 2), (0, 4), (0, 4), (4, 6)])), "0x^2 + 0x^4 + 0x^4 + 4x^6")        self.assertEqual(str(X.Polynomial([(0, 2), (0, 4), (0, 4), (-4, 6)])), "0x^2 + 0x^4 + 0x^4 - 4x^6")    @weight(2)    def test_polynomial_str_5(self):        self.assertEqual(str(X.Polynomial([(1, 1), (2, 3)])), "x + 2x^3")        self.assertEqual(str(X.Polynomial([(1, 2), (2, 4), (2, 4), (4, 6)])), "x^2 + 2x^4 + 2x^4 + 4x^6")        self.assertEqual(str(X.Polynomial([(-1, 2), (-2, 4), (-2, 4), (-4, 6)])), "-x^2 - 2x^4 - 2x^4 - 4x^6")    @weight(3)    def test_polynomial_str_6(self):        self.assertEqual(str(X.Polynomial([(1, 0)])), "1")        self.assertEqual(str(X.Polynomial([(-1, 0)])), "-1")        self.assertEqual(str(X.Polynomial([(0, 1)])), "0x")        self.assertEqual(str(X.Polynomial([(1, 1)])), "x")        self.assertEqual(str(X.Polynomial([(-1, 1)])), "-x")        self.assertEqual(str(X.Polynomial([(1, 2)])), "x^2")        self.assertEqual(str(X.Polynomial([(-1, 2)])), "-x^2")        self.assertEqual(str(X.Polynomial([])), "")        self.assertEqual(str(X.Polynomial([(0, 0)])), "0")        self.assertEqual(str(X.Polynomial([(1, 1), (0, 0), (2, 3)])), "x + 0 + 2x^3")if __name__ == '__main__':    unittest.main()