import unittestimport timeout_decoratorimport inspectimport osimport typesimport operatorimport pandas as pdfrom gradescope_utils.autograder_utils.decorators import weight, visibility, partial_creditimport solution.homework7 as Simport homework7 as X##### UTILITIES BEGIN #####def relpath(*args):    current_dir = os.path.dirname(os.path.realpath(__file__))    return os.path.join(current_dir, *args)def label_to_bool(input):    if type(input) == bool:        return input    if input.lower() == 'true':        return True    if input.lower() == 'yes':        return True    return False# For label evaluationdef compute_f1_score(true_dict, pred_dict):    tp, fp, fn, tn = 0, 0, 0, 0    for k in true_dict:        # Flip the label value if not in the prediction set        if k not in pred_dict:            if true_dict[k] == True:                fn += 1            elif true_dict[k] == False:                fp += 1            continue        if true_dict[k] != pred_dict[k]:            print(k, true_dict[k], pred_dict[k])        if true_dict[k] == True:            if pred_dict[k] == True:                tp += 1            else:                fn += 1        else:            if pred_dict[k] == True:                fp += 1            else:                tn += 1    prec = tp / (tp + fp)    recall = tp / (tp + fn)    f1 = 2 * prec * recall / (prec + recall)    return f1# For worker quality evaluationdef compute_accuracy(true_dict, pred_dict):    total = len(true_dict)    correct = 0    for k in true_dict:        if k not in pred_dict:            continue        if abs(true_dict[k] - pred_dict[k]) <= 1e-3:            correct += 1        else:            print(k)    acc = correct / total    return accmturk_res = pd.read_csv(relpath('hw7_data.csv'))M_labels = S.majority_vote(mturk_res)M_workers = {x:y for x, y in S.majority_vote_workers(mturk_res, M_labels)}M_labels = {(x, y): z for x, y, z in M_labels}W_workers = S.weighted_majority_vote_workers(mturk_res)W_labels = {(x, y): z for x, y, z in S.weighted_majority_vote(mturk_res, W_workers)}W_workers = {x:y for x, y in W_workers}Q_workers = {x:y for x, y in S.select_qualified_worker(mturk_res)}##### UTILITIES END #####class TestSolution(unittest.TestCase):############################################################# Majority vote############################################################    @weight(1)    @timeout_decorator.timeout(30)    def test_majority_vote_sorted(self):        X_labels = X.majority_vote(mturk_res)        sorted_X_labels = sorted(X_labels, key=operator.itemgetter(0, 1))        self.assertEqual(X_labels, sorted_X_labels, 'Label results not sorted.')    @partial_credit(3)    @timeout_decorator.timeout(30)    def test_majority_vote_labels(self, set_score=None):        X_labels = {(x, y):label_to_bool(z) for x, y, z in X.majority_vote(mturk_res)}        f1_score = compute_f1_score(M_labels, X_labels)        print("Your F1 score:", f1_score)        set_score(round(3 * f1_score, 1))#####    @weight(0.5)    @timeout_decorator.timeout(30)    def test_majority_vote_workers_sorted(self):        X_labels = X.majority_vote(mturk_res)        X_workers = X.majority_vote_workers(mturk_res, X_labels)        sorted_X_workers = sorted(X_workers, key=operator.itemgetter(0))        self.assertEqual(X_workers, sorted_X_workers, 'Worker ids not sorted.')    @weight(0.5)    @timeout_decorator.timeout(30)    def test_majority_vote_workers_3_decimal_points(self):        X_labels = X.majority_vote(mturk_res)        X_workers = [(x, float(y)) for x, y in X.majority_vote_workers(mturk_res, X_labels)]        rounded_X_workers = [(x, round(y,3)) for x, y in X_workers]        self.assertEqual(X_workers, rounded_X_workers,             'Quality not rounded to 3 decimal points.')    @partial_credit(3)    @timeout_decorator.timeout(30)    def test_majority_vote_workers_quality(self, set_score=None):        X_labels = X.majority_vote(mturk_res)        X_workers = {x:float(y) for x, y in X.majority_vote_workers(mturk_res, X_labels)}        accuracy = compute_accuracy(M_workers, X_workers)        print("Your accuracy:", accuracy)        set_score(round(3 * accuracy, 1))############################################################# Weighted majority vote############################################################    @weight(0.5)    @timeout_decorator.timeout(30)    def test_weighted_majority_vote_workers_sorted(self):        X_workers = X.weighted_majority_vote_workers(mturk_res)        sorted_X_workers = sorted(X_workers, key=operator.itemgetter(0))        self.assertEqual(X_workers, sorted_X_workers, 'Worker ids not sorted.')    @weight(0.5)    @timeout_decorator.timeout(30)    def test_weighted_majority_vote_workers_3_decimal_points(self):        # Some team encode float in strings        X_workers = [(x, float(y)) for x, y in X.weighted_majority_vote_workers(mturk_res)]        rounded_X_workers = [(x, round(y,3)) for x, y in X_workers]        self.assertEqual(X_workers, rounded_X_workers,             'Quality not rounded to 3 decimal points.')    @partial_credit(3)    @timeout_decorator.timeout(30)    def test_weighted_majority_vote_workers_quality(self, set_score=None):        X_workers = {x:float(y) for x, y in X.weighted_majority_vote_workers(mturk_res)}        accuracy = compute_accuracy(W_workers, X_workers)        print("Your accuracy:", accuracy)        set_score(round(3 * accuracy, 1))#####    @weight(1)    @timeout_decorator.timeout(30)    def test_weighted_majority_vote_sorted(self):        X_workers = X.weighted_majority_vote_workers(mturk_res)        X_labels = X.weighted_majority_vote(mturk_res, X_workers)        sorted_X_labels = sorted(X_labels, key=operator.itemgetter(0, 1))        self.assertEqual(X_labels, sorted_X_labels, 'Label results not sorted.')    @partial_credit(3)    @timeout_decorator.timeout(30)    def test_weighted_majority_vote_labels(self, set_score=None):        X_workers = X.weighted_majority_vote_workers(mturk_res)        X_labels = {(x, y):label_to_bool(z) for x, y, z in X.weighted_majority_vote(mturk_res, X_workers)}        f1_score = compute_f1_score(W_labels, X_labels)        print("Your F1 score:", f1_score)        set_score(round(3 * f1_score, 1))############################################################# Qualified workers############################################################    @weight(0.5)    @timeout_decorator.timeout(30)    def test_select_qualified_worker_sorted(self):        X_workers = X.select_qualified_worker(mturk_res)        sorted_X_workers = sorted(X_workers, key=operator.itemgetter(0))        self.assertEqual(X_workers, sorted_X_workers, 'Worker ids not sorted.')    @weight(0.5)    @timeout_decorator.timeout(30)    def test_select_qualified_worker_3_decimal_points(self):        X_workers = [(x, float(y)) for x, y in X.select_qualified_worker(mturk_res)]        # print(X_workers)        rounded_X_workers = [(x, round(y,3)) for x, y in X_workers]        self.assertEqual(X_workers, rounded_X_workers,             'Percentage not rounded to 3 decimal points.')    @partial_credit(3)    @timeout_decorator.timeout(30)    def test_select_qualified_worker_quality(self, set_score=None):        X_workers = {x:float(y) for x, y in X.select_qualified_worker(mturk_res)}        accuracy = compute_accuracy(Q_workers, X_workers)        print("Your accuracy:", accuracy)        set_score(round(3 * accuracy, 1))if __name__ == '__main__':    unittest.main()